spring:
  application:
    name: order-provider #服务器名称
  profiles:
    active: dev  # 本机开发环境
  main:
    allow-circular-references: true # 允许循环依赖
  datasource: #mysql数据库配置
    druid:
      driver-class-name: ${tiktok.datasource.driver-class-name}
      url: jdbc:mysql://${tiktok.datasource.host}:${tiktok.datasource.port}/${tiktok.datasource.database}?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false&allowPublicKeyRetrieval=true
      username: ${tiktok.datasource.username}
      password: ${tiktok.datasource.password}
  data:  #reids配置
    redis:
      host: ${tiktok.redis.host}
      port: ${tiktok.redis.port}
      password: ${tiktok.redis.password}
      database: ${tiktok.redis.database}
  rabbitmq: #配置MQ地址
    host: 127.0.0.1 # 本机地址
    port: 5672 # 端口
    virtual-host: / # 虚拟主机 virtual hosts，数据隔离
    username: guest # 默认用户名
    password: guest # 默认密码
  ai:
    dashscope:
      api-key: ${tiktok.AI_DASHSCOPE_API_KEY} #Spring Ai Alibaba配置

tiktok:
  jwt:
    # 设置jwt签名加密时使用的秘钥
    user-secret-key: tiktok
    # 设置jwt过期时间(20小时) 20h * 60min * 60s = 72000000ms
    user-ttl: 72000000
    # 设置前端传递过来的令牌名称
    user-token-name: token

server:
  port: 10887 # tomcat启动端口号

dubbo: #dubbo配置
  registry:
    address: ${tiktok.dubbo.registry.address} # 注册中心zookeeper配置（默认2181端口）
    group: tiktok_mall_service # 设置zookeeper的根节点，不配置将使用默认的根节点
  protocol:
    name: ${tiktok.dubbo.protocol.name} # 协议配置（triple）
    port: ${tiktok.dubbo.protocol.port} # 协议端口号配置
    serialization: hessian2
  scan:
    base-packages: com.tiktok.service # 扫描后将该包下所有有注解的服务注册到注册中心
  application:
    qos-enable: true
    qos-port: 33337
    qos-accept-foreign-ip: false
    serialize-check-status: WARN
    name: order-dubbo # dubbo应用名称

mybatis:
  #mapper配置文件
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.tiktok.entity
  configuration:
    #开启驼峰命名
    map-underscore-to-camel-case: true

# 日志配置
logging:
  level:
    com:
      tiktok:
        mapper: debug

# seata配置
seata:
  application-id: springboot-dubbo-seata-order # 当前应用在Seata中的唯一标识符
  # 事务组名称
  # 通过将服务划分到不同的事务服务组中，可以更方便地管理和配置分布式事务。例如，在一个电商系统中，
  # 订单服务、库存服务和支付服务可能属于同一个事务服务组，因为它们经常参与同一个分布式事务流程。
  tx-service-group: tiktok-mall-group-1
  enabled: true
  service:
    vgroup-mapping:
      tiktok-mall-group-1: default # 事务服务组与tc集群的映射
    grouplist:
      default: ${seata.address:127.0.0.1}:8091 # 虚拟分组 default对应的Seata服务实例的地址列表
  registry:
    type: file # Seata客户端使用的注册中心类型为 file
  config:
    type: file # Seata客户端使用的配置中心类型为 file
